/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ProductProductManagementImport } from './routes/Product/ProductManagement'
import { Route as ProductBennerProductsImport } from './routes/Product/BennerProducts'
import { Route as AuthRegisterImport } from './routes/Auth/Register'
import { Route as AuthLoginImport } from './routes/Auth/Login'
import { Route as AccoutAccoutSettingImport } from './routes/Accout/AccoutSetting'

// Create Virtual Routes

const IndexLazyImport = createFileRoute('/')()

// Create/Update Routes

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const ProductProductManagementRoute = ProductProductManagementImport.update({
  id: '/Product/ProductManagement',
  path: '/Product/ProductManagement',
  getParentRoute: () => rootRoute,
} as any)

const ProductBennerProductsRoute = ProductBennerProductsImport.update({
  id: '/Product/BennerProducts',
  path: '/Product/BennerProducts',
  getParentRoute: () => rootRoute,
} as any)

const AuthRegisterRoute = AuthRegisterImport.update({
  id: '/Auth/Register',
  path: '/Auth/Register',
  getParentRoute: () => rootRoute,
} as any)

const AuthLoginRoute = AuthLoginImport.update({
  id: '/Auth/Login',
  path: '/Auth/Login',
  getParentRoute: () => rootRoute,
} as any)

const AccoutAccoutSettingRoute = AccoutAccoutSettingImport.update({
  id: '/Accout/AccoutSetting',
  path: '/Accout/AccoutSetting',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/Accout/AccoutSetting': {
      id: '/Accout/AccoutSetting'
      path: '/Accout/AccoutSetting'
      fullPath: '/Accout/AccoutSetting'
      preLoaderRoute: typeof AccoutAccoutSettingImport
      parentRoute: typeof rootRoute
    }
    '/Auth/Login': {
      id: '/Auth/Login'
      path: '/Auth/Login'
      fullPath: '/Auth/Login'
      preLoaderRoute: typeof AuthLoginImport
      parentRoute: typeof rootRoute
    }
    '/Auth/Register': {
      id: '/Auth/Register'
      path: '/Auth/Register'
      fullPath: '/Auth/Register'
      preLoaderRoute: typeof AuthRegisterImport
      parentRoute: typeof rootRoute
    }
    '/Product/BennerProducts': {
      id: '/Product/BennerProducts'
      path: '/Product/BennerProducts'
      fullPath: '/Product/BennerProducts'
      preLoaderRoute: typeof ProductBennerProductsImport
      parentRoute: typeof rootRoute
    }
    '/Product/ProductManagement': {
      id: '/Product/ProductManagement'
      path: '/Product/ProductManagement'
      fullPath: '/Product/ProductManagement'
      preLoaderRoute: typeof ProductProductManagementImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/Accout/AccoutSetting': typeof AccoutAccoutSettingRoute
  '/Auth/Login': typeof AuthLoginRoute
  '/Auth/Register': typeof AuthRegisterRoute
  '/Product/BennerProducts': typeof ProductBennerProductsRoute
  '/Product/ProductManagement': typeof ProductProductManagementRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/Accout/AccoutSetting': typeof AccoutAccoutSettingRoute
  '/Auth/Login': typeof AuthLoginRoute
  '/Auth/Register': typeof AuthRegisterRoute
  '/Product/BennerProducts': typeof ProductBennerProductsRoute
  '/Product/ProductManagement': typeof ProductProductManagementRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/Accout/AccoutSetting': typeof AccoutAccoutSettingRoute
  '/Auth/Login': typeof AuthLoginRoute
  '/Auth/Register': typeof AuthRegisterRoute
  '/Product/BennerProducts': typeof ProductBennerProductsRoute
  '/Product/ProductManagement': typeof ProductProductManagementRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/Accout/AccoutSetting'
    | '/Auth/Login'
    | '/Auth/Register'
    | '/Product/BennerProducts'
    | '/Product/ProductManagement'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/Accout/AccoutSetting'
    | '/Auth/Login'
    | '/Auth/Register'
    | '/Product/BennerProducts'
    | '/Product/ProductManagement'
  id:
    | '__root__'
    | '/'
    | '/Accout/AccoutSetting'
    | '/Auth/Login'
    | '/Auth/Register'
    | '/Product/BennerProducts'
    | '/Product/ProductManagement'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  AccoutAccoutSettingRoute: typeof AccoutAccoutSettingRoute
  AuthLoginRoute: typeof AuthLoginRoute
  AuthRegisterRoute: typeof AuthRegisterRoute
  ProductBennerProductsRoute: typeof ProductBennerProductsRoute
  ProductProductManagementRoute: typeof ProductProductManagementRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  AccoutAccoutSettingRoute: AccoutAccoutSettingRoute,
  AuthLoginRoute: AuthLoginRoute,
  AuthRegisterRoute: AuthRegisterRoute,
  ProductBennerProductsRoute: ProductBennerProductsRoute,
  ProductProductManagementRoute: ProductProductManagementRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/Accout/AccoutSetting",
        "/Auth/Login",
        "/Auth/Register",
        "/Product/BennerProducts",
        "/Product/ProductManagement"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/Accout/AccoutSetting": {
      "filePath": "Accout/AccoutSetting.tsx"
    },
    "/Auth/Login": {
      "filePath": "Auth/Login.tsx"
    },
    "/Auth/Register": {
      "filePath": "Auth/Register.tsx"
    },
    "/Product/BennerProducts": {
      "filePath": "Product/BennerProducts.tsx"
    },
    "/Product/ProductManagement": {
      "filePath": "Product/ProductManagement.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
