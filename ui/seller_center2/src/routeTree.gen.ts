/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ProfileImport } from './routes/profile'
import { Route as IndexImport } from './routes/index'
import { Route as ProductProductImport } from './routes/product/_product'
import { Route as AuthAuthImport } from './routes/auth/_auth'
import { Route as ProductProductAddProductImport } from './routes/product/_product.addProduct'
import { Route as AuthAuthRegisterImport } from './routes/auth/_auth.register'
import { Route as AuthAuthLoginImport } from './routes/auth/_auth.login'

// Create Virtual Routes

const ProductImport = createFileRoute('/product')()
const AuthImport = createFileRoute('/auth')()

// Create/Update Routes

const ProductRoute = ProductImport.update({
  id: '/product',
  path: '/product',
  getParentRoute: () => rootRoute,
} as any)

const AuthRoute = AuthImport.update({
  id: '/auth',
  path: '/auth',
  getParentRoute: () => rootRoute,
} as any)

const ProfileRoute = ProfileImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const ProductProductRoute = ProductProductImport.update({
  id: '/_product',
  getParentRoute: () => ProductRoute,
} as any)

const AuthAuthRoute = AuthAuthImport.update({
  id: '/_auth',
  getParentRoute: () => AuthRoute,
} as any)

const ProductProductAddProductRoute = ProductProductAddProductImport.update({
  id: '/addProduct',
  path: '/addProduct',
  getParentRoute: () => ProductProductRoute,
} as any)

const AuthAuthRegisterRoute = AuthAuthRegisterImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => AuthAuthRoute,
} as any)

const AuthAuthLoginRoute = AuthAuthLoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => AuthAuthRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/profile': {
      id: '/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof ProfileImport
      parentRoute: typeof rootRoute
    }
    '/auth': {
      id: '/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthImport
      parentRoute: typeof rootRoute
    }
    '/auth/_auth': {
      id: '/auth/_auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthAuthImport
      parentRoute: typeof AuthRoute
    }
    '/product': {
      id: '/product'
      path: '/product'
      fullPath: '/product'
      preLoaderRoute: typeof ProductImport
      parentRoute: typeof rootRoute
    }
    '/product/_product': {
      id: '/product/_product'
      path: '/product'
      fullPath: '/product'
      preLoaderRoute: typeof ProductProductImport
      parentRoute: typeof ProductRoute
    }
    '/auth/_auth/login': {
      id: '/auth/_auth/login'
      path: '/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthAuthLoginImport
      parentRoute: typeof AuthAuthImport
    }
    '/auth/_auth/register': {
      id: '/auth/_auth/register'
      path: '/register'
      fullPath: '/auth/register'
      preLoaderRoute: typeof AuthAuthRegisterImport
      parentRoute: typeof AuthAuthImport
    }
    '/product/_product/addProduct': {
      id: '/product/_product/addProduct'
      path: '/addProduct'
      fullPath: '/product/addProduct'
      preLoaderRoute: typeof ProductProductAddProductImport
      parentRoute: typeof ProductProductImport
    }
  }
}

// Create and export the route tree

interface AuthAuthRouteChildren {
  AuthAuthLoginRoute: typeof AuthAuthLoginRoute
  AuthAuthRegisterRoute: typeof AuthAuthRegisterRoute
}

const AuthAuthRouteChildren: AuthAuthRouteChildren = {
  AuthAuthLoginRoute: AuthAuthLoginRoute,
  AuthAuthRegisterRoute: AuthAuthRegisterRoute,
}

const AuthAuthRouteWithChildren = AuthAuthRoute._addFileChildren(
  AuthAuthRouteChildren,
)

interface AuthRouteChildren {
  AuthAuthRoute: typeof AuthAuthRouteWithChildren
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthAuthRoute: AuthAuthRouteWithChildren,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

interface ProductProductRouteChildren {
  ProductProductAddProductRoute: typeof ProductProductAddProductRoute
}

const ProductProductRouteChildren: ProductProductRouteChildren = {
  ProductProductAddProductRoute: ProductProductAddProductRoute,
}

const ProductProductRouteWithChildren = ProductProductRoute._addFileChildren(
  ProductProductRouteChildren,
)

interface ProductRouteChildren {
  ProductProductRoute: typeof ProductProductRouteWithChildren
}

const ProductRouteChildren: ProductRouteChildren = {
  ProductProductRoute: ProductProductRouteWithChildren,
}

const ProductRouteWithChildren =
  ProductRoute._addFileChildren(ProductRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/profile': typeof ProfileRoute
  '/auth': typeof AuthAuthRouteWithChildren
  '/product': typeof ProductProductRouteWithChildren
  '/auth/login': typeof AuthAuthLoginRoute
  '/auth/register': typeof AuthAuthRegisterRoute
  '/product/addProduct': typeof ProductProductAddProductRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/profile': typeof ProfileRoute
  '/auth': typeof AuthAuthRouteWithChildren
  '/product': typeof ProductProductRouteWithChildren
  '/auth/login': typeof AuthAuthLoginRoute
  '/auth/register': typeof AuthAuthRegisterRoute
  '/product/addProduct': typeof ProductProductAddProductRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/profile': typeof ProfileRoute
  '/auth': typeof AuthRouteWithChildren
  '/auth/_auth': typeof AuthAuthRouteWithChildren
  '/product': typeof ProductRouteWithChildren
  '/product/_product': typeof ProductProductRouteWithChildren
  '/auth/_auth/login': typeof AuthAuthLoginRoute
  '/auth/_auth/register': typeof AuthAuthRegisterRoute
  '/product/_product/addProduct': typeof ProductProductAddProductRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/profile'
    | '/auth'
    | '/product'
    | '/auth/login'
    | '/auth/register'
    | '/product/addProduct'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/profile'
    | '/auth'
    | '/product'
    | '/auth/login'
    | '/auth/register'
    | '/product/addProduct'
  id:
    | '__root__'
    | '/'
    | '/profile'
    | '/auth'
    | '/auth/_auth'
    | '/product'
    | '/product/_product'
    | '/auth/_auth/login'
    | '/auth/_auth/register'
    | '/product/_product/addProduct'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ProfileRoute: typeof ProfileRoute
  AuthRoute: typeof AuthRouteWithChildren
  ProductRoute: typeof ProductRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ProfileRoute: ProfileRoute,
  AuthRoute: AuthRouteWithChildren,
  ProductRoute: ProductRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/profile",
        "/auth",
        "/product"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/profile": {
      "filePath": "profile.tsx"
    },
    "/auth": {
      "filePath": "auth",
      "children": [
        "/auth/_auth"
      ]
    },
    "/auth/_auth": {
      "filePath": "auth/_auth.tsx",
      "parent": "/auth",
      "children": [
        "/auth/_auth/login",
        "/auth/_auth/register"
      ]
    },
    "/product": {
      "filePath": "product",
      "children": [
        "/product/_product"
      ]
    },
    "/product/_product": {
      "filePath": "product/_product.tsx",
      "parent": "/product",
      "children": [
        "/product/_product/addProduct"
      ]
    },
    "/auth/_auth/login": {
      "filePath": "auth/_auth.login.tsx",
      "parent": "/auth/_auth"
    },
    "/auth/_auth/register": {
      "filePath": "auth/_auth.register.tsx",
      "parent": "/auth/_auth"
    },
    "/product/_product/addProduct": {
      "filePath": "product/_product.addProduct.tsx",
      "parent": "/product/_product"
    }
  }
}
ROUTE_MANIFEST_END */
